{"version":3,"sources":["api/client.js","features/notifications/notificationsSlice.js","app/Navbar.js","features/api/apiSlice.js","features/users/usersSlice.js","features/posts/Author.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButton.js","components/Spinner.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","features/users/UserList.js","features/users/UserPage.js","features/notifications/NotificationList.js","features/news/newsSlice.js","features/news/NewsList.js","components/HomePage.js","App.js","api/server.js","app/store.js","index.js"],"names":["client","_x","_client","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","endpoint","_ref","body","customConfig","headers","config","data","response","_args","wrap","_context","prev","next","length","undefined","_objectWithoutProperties","_excluded","_objectSpread","method","JSON","stringify","window","fetch","sent","json","ok","abrupt","status","url","Error","statusText","t0","Promise","reject","message","stop","get","post","fetchNotifications","createAsyncThunk","_ref2","_","getState","allNotifications","_allNotifications","latestNotification","latestTimestamp","selectAllNotifications","_slicedToArray","date","concat","_x2","notificationsSlice","createSlice","name","initialState","reducers","allNotificationsRead","state","action","forEach","notification","read","extraReducers","builder","addCase","fulfilled","push","_toConsumableArray","payload","isNew","sort","a","b","localeCompare","actions","notifications","Navbar","unreadNotificationsBadge","dispatch","useDispatch","numUnreadNotifications","useSelector","filter","n","_jsx","className","children","_jsxs","_Fragment","Link","to","onClick","Outlet","apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","getPosts","query","providesTags","result","map","type","id","getPost","postId","error","arg","addNewPost","mutation","initialPost","invalidatesTags","editPost","addReaction","reaction","useGetPostsQuery","useGetPostQuery","useAddNewPostMutation","useEditPostMutation","useAddReactionMutation","usersAdapter","createEntityAdapter","getInitialState","extendedApiSlice","injectEndpoints","getUsers","transformResponse","responseData","setAll","selectUsersResult","useGetUsersQuery","select","selectUsersData","createSelector","usersResult","_usersAdapter$getSele","getSelectors","_selectUsersData","selectAllUsers","selectAll","selectUserById","selectById","Author","userId","author","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","title","postsAdapter","sortComparer","fetchPosts","_callee2","_context2","postsSlice","postEdited","_action$payload","content","entities","reactionAdded","_action$payload2","reactionName","reactions","pending","upsertMany","rejected","addOne","_postsAdapter$getSele","posts","selectAllPosts","_postsSlice$actions","selectIds","user","reactionEmoji","postAdded","thumbsUp","heart","eyes","ReactionButtons","_useAddReactionMutati","Object","entries","_ref3","emoji","onClickHandler","Spinner","_ref$text","text","_ref$size","size","header","style","height","width","PostExcerpt","substring","PostsList","isAddPostLoading","_useGetPostsQuery","_useGetPostsQuery$dat","isLoading","isFetching","isSuccess","isError","sortedPosts","useMemo","_useAddNewPostMutatio","_useAddNewPostMutatio2","isAddNewPostLoading","renderedPosts","containerClassname","classnames","disabled","AddPostForm","setIsAddPostLoading","users","_useState","useState","_useState2","setTitle","_useState3","_useState4","setContent","_useState5","_useState6","setUserId","useEffect","canSave","every","Boolean","onSubmitHandler","e","preventDefault","unwrap","console","finish","onSubmit","htmlFor","placeholder","value","onChange","target","SinglePostPage","useParams","_useGetPostQuery","EditPostForm","navigate","useNavigate","_useEditPostMutation","updatePost","form","UserList","UserPage","selectPostsForUser","res","_data$filter","postTitles","selectFromResult","postsForUser","NotificationsList","useLayoutEffect","renderedNotifications","find","notificationClassname","new","fetchNews","articles","newsSlice","selectNews","news","NewsList","log","index","href","publishedAt","HomePage","App","seedDate","BrowserRouter","basename","Routes","Route","path","element","configureStore","reducer","_defineProperty","notificationReducer","newsReducer","middleware","getDefaultMiddleware","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","db","factory","primaryKey","nanoid","firstName","String","lastName","username","manyOf","oneOf","comments","comment","Number","hooray","rocket","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","req","ctx","getAll","delay","findFirst","where","equals","params","patch","_req$body","updatedPost","update","generateRandomNotifications","socketServer","setupWorker","MockSocketServer","sendRandomNotifications","socket","since","obj","send","sendMessage","on","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","_start","store","initiate","ReactDOM","render","React","StrictMode","Provider","document","getElementById","start"],"mappings":"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","file":"static/js/main.ee677784.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\n\r\nexport async function client(endpoint, { body, ...customConfig } = {}) {\r\n  const headers = { 'Content-Type': 'application/json' }\r\n\r\n  const config = {\r\n    method: body ? 'POST' : 'GET',\r\n    ...customConfig,\r\n    headers: {\r\n      ...headers,\r\n      ...customConfig.headers,\r\n    },\r\n  }\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body)\r\n  }\r\n\r\n  let data\r\n  try {\r\n    const response = await window.fetch(endpoint, config)\r\n    data = await response.json()\r\n    if (response.ok) {\r\n      // Return a result object similar to Axios\r\n      return {\r\n        status: response.status,\r\n        data,\r\n        headers: response.headers,\r\n        url: response.url,\r\n      }\r\n    }\r\n    throw new Error(response.statusText)\r\n  } catch (err) {\r\n    return Promise.reject(err.message ? err.message : data)\r\n  }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, method: 'GET' })\r\n}\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, body })\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nimport { client } from '../../api/client'\r\n\r\nexport const fetchNotifications = createAsyncThunk(\r\n    'notifications/fetchNotifications',\r\n    async (_, { getState }) => {\r\n        const allNotifications = selectAllNotifications(getState())\r\n        const [latestNotification] = allNotifications\r\n        const latestTimestamp = latestNotification ? latestNotification.date : ''\r\n        const response = await client.get(\r\n            `/fakeApi/notifications?since=${latestTimestamp}`\r\n        )\r\n        return response.data\r\n    }\r\n)\r\n\r\nconst notificationsSlice = createSlice({\r\n    name: 'notifications',\r\n    initialState: [],\r\n    reducers: {\r\n        allNotificationsRead(state, action) {\r\n            state.forEach(notification => {\r\n                notification.read = true\r\n            })\r\n        }\r\n    },\r\n    extraReducers(builder) {\r\n        builder.addCase(fetchNotifications.fulfilled, (state, action) => {\r\n            state.push(...action.payload)\r\n            state.forEach(notification => {\r\n                // Any notifications we've read are no longer new\r\n                notification.isNew = !notification.read\r\n            })\r\n            // Sort with newest first\r\n            state.sort((a, b) => b.date.localeCompare(a.date))\r\n        })\r\n    }\r\n})\r\n\r\nexport default notificationsSlice.reducer\r\nexport const { allNotificationsRead } = notificationsSlice.actions\r\nexport const selectAllNotifications = state => state.notifications\r\n","import { Outlet, Link } from 'react-router-dom'\r\nimport { fetchNotifications, selectAllNotifications } from '../features/notifications/notificationsSlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst Navbar = () => {\r\n  const dispatch = useDispatch()\r\n  const notifications = useSelector(selectAllNotifications)\r\n  const numUnreadNotifications = notifications.filter(n=>!n.read).length\r\n\r\n  let unreadNotificationsBadge\r\n\r\n  if (numUnreadNotifications > 0) {\r\n    unreadNotificationsBadge = (\r\n      <span className=\"badge\">{numUnreadNotifications}</span>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <section>\r\n          <h1>Redux Essentials Example</h1>\r\n          <div className=\"navContent\">\r\n            <div className=\"navLinks\">\r\n              <Link to={'/'}>Home</Link>\r\n              <Link to={'/users'}>Users</Link>\r\n              <Link to={'/notifications'}>Notifications {unreadNotificationsBadge}</Link>\r\n              <Link to={'/news'}>News</Link>\r\n            </div>\r\n            <button className=\"button\" onClick={() => {\r\n              dispatch(fetchNotifications())\r\n            }}>\r\n              Refresh Notifications\r\n            </button>\r\n          </div>\r\n        </section>\r\n      </nav>\r\n      <Outlet />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","/* React-specific entry point that automatically generates\r\n   hooks corresponding to the defined endpoints */\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\n// Define our single API slice object\r\nexport const apiSlice = createApi({\r\n    // The cache reducer expects to be added at `state.api` (already default - this is optional)\r\n    reducerPath: 'api',\r\n    // All of our requests will have URLs starting with '/fakeApi'\r\n    baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\r\n    // A root tagTypes field in the API slice object, declaring an array of string tag names for data types such as 'Post'\r\n    tagTypes: ['Post'],\r\n    // The \"endpoints\" represent operations and requests for this server\r\n    endpoints: builder => ({\r\n        // The `getPosts` endpoint is a \"query\" operation that returns data\r\n        getPosts: builder.query({\r\n            // The URL for the request is '/fakeApi/posts'\r\n            query: () => '/posts',\r\n            // A providesTags array in query endpoints, listing a set of tags describing the data in that query\r\n            providesTags: (result = [], error, arg) => [\r\n                'Post',\r\n                ...result.map(({ id }) => ({ type: 'Post', id }))\r\n            ]\r\n        }),\r\n        // read the post entry from the cache in the store\r\n        getPost: builder.query({\r\n            query: postId => `/posts/${postId}`,\r\n            providesTags: (result, error, arg) => [{ type: 'Post', id: arg }]\r\n        }),\r\n        addNewPost: builder.mutation({\r\n            query: initialPost => ({\r\n                url: '/posts',\r\n                method: 'POST',\r\n                body: initialPost\r\n            }),\r\n            // An invalidatesTags array in mutation endpoints, listing a set of tags that are invalidated every time that mutation runs\r\n            invalidatesTags: ['Post']\r\n        }),\r\n        editPost: builder.mutation({\r\n            query: post => ({\r\n                url: `/posts/${post.id}`,\r\n                method: 'PATCH',\r\n                body: post\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }]\r\n        }),\r\n        addReaction: builder.mutation({\r\n            query: ({ postId, reaction }) => ({\r\n                url: `posts/${postId}/reactions`,\r\n                method: 'POST',\r\n                body: { reaction }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'Post', id: arg.postId }\r\n            ]\r\n        })\r\n\r\n    }),\r\n})\r\n\r\n// Export the auto-generated hook for the `getPosts` query endpoint\r\nexport const {\r\n    useGetPostsQuery,\r\n    useGetPostQuery,\r\n    useAddNewPostMutation,\r\n    useEditPostMutation,\r\n    useAddReactionMutation\r\n} = apiSlice","import { createEntityAdapter, createSelector } from '@reduxjs/toolkit'\r\nimport { apiSlice } from '../api/apiSlice'\r\n\r\nconst usersAdapter = createEntityAdapter()\r\nconst initialState = usersAdapter.getInitialState()\r\n\r\nexport const extendedApiSlice = apiSlice.injectEndpoints({\r\n  endpoints: builder => ({\r\n    getUsers: builder.query({\r\n      query: () => '/users',\r\n      transformResponse: responseData => {\r\n        // it will return the standard {ids: [], entities: {}} normalized data structure\r\n        return usersAdapter.setAll(initialState, responseData)\r\n      }\r\n    })\r\n  })\r\n})\r\n\r\nexport const { useGetUsersQuery } = extendedApiSlice\r\n\r\n// Calling `someEndpoint.select(someArg)` generates a new selector that will return\r\n// the query result object for a query with those parameters.\r\n// To generate a selector for a specific query argument, call `select(theQueryArg)`.\r\n// In this case, the users query has no params, so we don't pass anything to select()\r\nexport const selectUsersResult = extendedApiSlice.endpoints.getUsers.select()\r\n\r\nexport const selectUsersData = createSelector(\r\n  selectUsersResult,\r\n  usersResult => usersResult.data\r\n)\r\nexport const {\r\n  selectAll: selectAllUsers,//rename the selectors\r\n  selectById: selectUserById\r\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)\r\n\r\n","import { useSelector } from \"react-redux\"\r\nimport { selectUserById } from \"../users/usersSlice\"\r\n\r\nconst Author = ({ userId }) => {\r\n    const author = useSelector(state => selectUserById(state,userId))\r\n\r\n    return (\r\n        <span>by {author ? author.name : 'unknown author'}</span>\r\n    )\r\n}\r\n\r\nexport default Author","import React from 'react'\r\nimport { parseISO, formatDistanceToNow } from 'date-fns'\r\n\r\nconst TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = ''\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp)\r\n    const timePeriod = formatDistanceToNow(date)\r\n    timeAgo = `${timePeriod} ago`\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  )\r\n}\r\n\r\n\r\nexport default TimeAgo","import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\n// Taking ID as the argument rather than POST can improve the performance\r\n// because IDs won't change (unless the sorting function changes)\r\n// but POST can changes a lot, because it is a reference, any field change will cause POST change\r\n// How to get the sorted ID? by createEntityAdapter\r\nconst postsAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => b.date.localeCompare(a.date)\r\n})\r\n\r\n// getInitialState returns an empty {ids: [], entities: {}} plus what we provided\r\nconst initialState = postsAdapter.getInitialState({\r\n    status: 'idle',\r\n    error: null\r\n})\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n    const response = await client.get('/fakeApi/posts')\r\n    return response.data\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {\r\n    const response = await client.post('/fakeApi/posts', initialPost)\r\n    return response.data\r\n})\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        postEdited: (state, action) => {\r\n            const { id, title, content } = action.payload\r\n            const post = state.entities[id]\r\n            if (post) {\r\n                post.title = title\r\n                post.content = content\r\n            }\r\n        },\r\n        reactionAdded: (state, action) => {\r\n            const { postId, reactionName } = action.payload\r\n            const post = state.entities[postId]\r\n            if (post) {\r\n                post.reactions[reactionName]++\r\n            }\r\n        }\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(fetchPosts.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchPosts.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'\r\n                // Use the `upsertMany` reducer as a mutating update utility\r\n                postsAdapter.upsertMany(state, action.payload)\r\n                //state.posts = state.posts.concat(action.payload)\r\n            })\r\n            .addCase(fetchPosts.rejected, (state, action) => {\r\n                state.status = 'failed'\r\n                state.error = action.error.message\r\n            })\r\n            // Use the `addOne` reducer for the fulfilled case\r\n            .addCase(addNewPost.fulfilled, postsAdapter.addOne)\r\n    }\r\n})\r\n\r\nexport const {\r\n    selectAll: selectAllPosts,//rename the selectors\r\n    selectById: selectPostById,\r\n    selectIds: selectPostIds\r\n} = postsAdapter.getSelectors(state => state.posts)\r\n\r\n// memorized selector to improve performance when immutably update the state\r\n// filter will return a new array -> reference changes -> re-render\r\nexport const selectPostByUser = createSelector(\r\n    [selectAllPosts, (state,userId)=>userId],\r\n    (posts,userId)=>posts.filter(post=>post.user===userId)\r\n)\r\n\r\nexport const { postAdded, postEdited, reactionAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer","import { useDispatch } from \"react-redux\"\r\nimport { reactionAdded } from \"./postsSlice\"\r\nimport { useAddReactionMutation } from \"../api/apiSlice\"\r\n\r\nconst reactionEmoji = {\r\n    thumbsUp: '👍',\r\n    //hooray: '🎉',\r\n    heart: '❤️',\r\n    //rocket: '🚀',\r\n    eyes: '👀'\r\n}\r\n\r\nconst ReactionButtons = ({ post }) => {\r\n    const [addReaction] = useAddReactionMutation()\r\n\r\n    const onClickHandler = (id, name) => {\r\n        // when parameters and arguments don't have same names, have to write both\r\n        //dispatch(reactionAdded({ postId: id, reactionName: name }))\r\n        addReaction({postId:id, reaction:name})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n                return (<button\r\n                    key={name}\r\n                    className=\"muted-button reaction-button\"\r\n                    onClick={() => onClickHandler(post.id, name)}\r\n                >\r\n                    {emoji} {post.reactions[name]}\r\n                </button>)\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReactionButtons","import React from 'react'\r\n\r\nexport const Spinner = ({ text = '', size = '5em' }) => {\r\n  const header = text ? <h4>{text}</h4> : null\r\n  return (\r\n    <div className=\"spinner\">\r\n      {header}\r\n      <div className=\"loader\" style={{ height: size, width: size }} />\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useMemo } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Author from './Author'\r\nimport TimeAgo from './TimeAgo'\r\nimport ReactionButtons from './ReactionButton'\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { apiSlice, useAddNewPostMutation, useGetPostsQuery } from '../api/apiSlice'\r\nimport classnames from 'classnames'\r\nimport { createSelector } from '@reduxjs/toolkit'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst PostExcerpt = ({ post }) => {\r\n  return (\r\n    <article className='post-excerpt' key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <Author userId={post.user} />\r\n      <TimeAgo timestamp={post.date} />\r\n      <p className='post-content'>{post.content.substring(0, 100)}</p>\r\n      <Link to={`posts/${post.id}`} className='button muted-button'>View </Link>\r\n      <Link to={`editPost/${post.id}`} className='button muted-button'>Edit </Link>\r\n      <ReactionButtons post={post} />\r\n    </article>\r\n  )\r\n}\r\n\r\nconst PostsList = ({isAddPostLoading}) => {\r\n  const {\r\n    data: posts = [],\r\n    isLoading,\r\n    isFetching,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n  } = useGetPostsQuery()\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    return [...posts].sort((a, b) => b.date.localeCompare(a.date))\r\n  }, [posts])\r\n\r\n  // Why I can't get 'isLoading' for useAddNewPostMutation for a second time?\r\n  // Why this is always false here?\r\n  // when inside AddPostForm component, this value changes normally\r\n  const [addNewPost, { isLoading: isAddNewPostLoading }] = useAddNewPostMutation()\r\n\r\n  // If use this method, don't know mutations.ID\r\n  //const isAddNewPostLoading = useSelector(state=>state.api.mutations.ID?.status)\r\n\r\n  let content\r\n\r\n  if (isLoading) {\r\n    content = <Spinner text='Loading...' />\r\n  } else if (isSuccess) {\r\n    const renderedPosts = sortedPosts.map(post => (\r\n      <PostExcerpt key={post.id} post={post} />\r\n    ))    \r\n    const containerClassname = classnames('posts-container', { disabled: isAddPostLoading || isFetching })\r\n    content = <div className={containerClassname}>{renderedPosts}</div>\r\n  } else if (isError) {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <section className='posts-list'>\r\n      <h2>Posts</h2>\r\n      <p>{`isAddNewPostLoading:${isAddNewPostLoading}`}</p>\r\n      {content}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PostsList","import { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectAllUsers } from \"../users/usersSlice\"\r\nimport { useAddNewPostMutation } from \"../api/apiSlice\"\r\n\r\nconst AddPostForm = ({setIsAddPostLoading}) => {\r\n  const users = useSelector(selectAllUsers)\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [userId, setUserId] = useState('')\r\n\r\n  const [addNewPost, { isLoading }] = useAddNewPostMutation()\r\n\r\n  useEffect(()=>{\r\n    setIsAddPostLoading(isLoading)\r\n  },[isLoading])\r\n\r\n  // Since this is a fake API, the new post won't persist if we reload the page\r\n  const canSave = [title, content, userId].every(Boolean) && !isLoading\r\n\r\n  const onSubmitHandler = async (e) => {\r\n    e.preventDefault()\r\n    if (canSave) {\r\n      try {\r\n        // dispatch returns the final action, but not pending, fulfilled or failed, \r\n        // because createAsyncThunk handle that internally. So we need to unwrap it\r\n        await addNewPost({ title, content, user: userId }).unwrap()\r\n        setTitle('')\r\n        setContent('')\r\n        setUserId('')\r\n      } catch (error) {\r\n        console.error('Failed to save the post:', error)\r\n      } finally {\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form onSubmit={onSubmitHandler}>\r\n        <label htmlFor='postTitle'>Post Title:</label>\r\n        <input\r\n          id='postTitle'\r\n          type='text'\r\n          placeholder='Your title'\r\n          value={title}\r\n          onChange={e => setTitle(e.target.value)}\r\n        />\r\n        <label htmlFor='postAuthor'>Author:</label>\r\n        <select id='postAuthor' value={userId} onChange={e => { setUserId(e.target.value) }}>\r\n          <option value=''></option>\r\n          {users.map(user => <option key={user.id} value={user.id}>{user.name}</option>)}\r\n        </select>\r\n        <label htmlFor='postContent'>Content:</label>\r\n        <textarea id='Content' placeholder='Your post' value={content} onChange={e => setContent(e.target.value)}></textarea>\r\n        <input type='submit' value={'Save Post'} />\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default AddPostForm","import { useParams } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom'\r\nimport Author from './Author'\r\nimport TimeAgo from './TimeAgo'\r\nimport { useGetPostQuery } from '../api/apiSlice'\r\nimport { Spinner } from '../../components/Spinner'\r\n\r\nconst SinglePostPage = () => {\r\n  const { postId } = useParams()\r\n\r\n  const {\r\n    data: post,\r\n    isFetching,\r\n    isSuccess\r\n  } = useGetPostQuery(postId)\r\n\r\n  let content\r\n  if (isFetching) {\r\n    content = <Spinner text='Loading...' />\r\n  } else if (isSuccess) {\r\n    content = (\r\n      <article className='post'>\r\n        <h2>{post.title}</h2>\r\n        <Author userId={post.userId} />\r\n        <TimeAgo timestamp={post.date} />\r\n        <p className='post-content'>{post.content}</p>\r\n        <Link to={`/editPost/${postId}`} className='button muted-button'>Edit </Link>\r\n      </article >\r\n    )\r\n  }\r\n  return (\r\n    <section>{content}</section >\r\n  )\r\n}\r\n\r\nexport default SinglePostPage","import { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport { useEditPostMutation, useGetPostQuery } from '../api/apiSlice'\r\nimport { Spinner } from '../../components/Spinner'\r\n\r\nconst EditPostForm = () => {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const { postId } = useParams()\r\n    //const post = useSelector(state => selectPostById(state,postId))\r\n    const {\r\n        data: post,\r\n        isFetching,\r\n        isSuccess\r\n    } = useGetPostQuery(postId)\r\n\r\n    const [updatePost] = useEditPostMutation()\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [content, setContent] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isSuccess) {\r\n            setTitle(post.title)\r\n            setContent(post.content)\r\n        }\r\n    }, [isSuccess])\r\n    const onSubmitHandler = async (e) => {\r\n        e.preventDefault()\r\n        if (title && content) {\r\n            await updatePost({ id: postId, title, content })\r\n            navigate(`/posts/${postId}`)\r\n        }\r\n    }\r\n\r\n    let form\r\n    if (isFetching) {\r\n        form = <Spinner text='Loading...' />\r\n    } else if (isSuccess) {\r\n        form = (\r\n            <form onSubmit={e => onSubmitHandler(e)}>\r\n                <label htmlFor='postTitle'>Post Title:</label>\r\n                <input\r\n                    id='postTitle'\r\n                    type='text'\r\n                    placeholder='Your title'\r\n                    value={title}\r\n                    onChange={e => setTitle(e.target.value)}\r\n                />\r\n                <label htmlFor='postContent'>Content:</label>\r\n                <textarea id='Content' placeholder='Your post' value={content} onChange={e => setContent(e.target.value)}></textarea>\r\n                <input type='submit' value={'Save Post'} />\r\n            </form>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <>\r\n                <h2>Edit Post</h2>\r\n                {form}\r\n            </>\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default EditPostForm","import { useSelector } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { selectAllUsers } from \"./usersSlice\"\r\n\r\nconst UserList = () => {\r\n    const users = useSelector(selectAllUsers)\r\n    return (\r\n        <section>\r\n            <h2>Users</h2>\r\n            <ul>\r\n                {users.map(user => (\r\n                    <li key={user.id}>\r\n                        <Link to={`/users/${user.id}`}>{user.name}</Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </section>\r\n\r\n    )\r\n}\r\n\r\nexport default UserList","import { useSelector } from \"react-redux\"\r\nimport { Link, useParams } from \"react-router-dom\"\r\nimport { selectUserById } from \"./usersSlice\"\r\nimport { useGetPostsQuery } from \"../api/apiSlice\"\r\nimport { useMemo } from \"react\"\r\nimport { createSelector } from \"@reduxjs/toolkit\"\r\n\r\nconst UserPage = () => {\r\n    const { userId } = useParams()\r\n  \r\n    const user = useSelector(state => selectUserById(state, userId))\r\n  \r\n    //const postsForUser = useSelector(state => selectPostByUser(state, userId))\r\n    const selectPostsForUser = useMemo(()=>{\r\n      return createSelector(\r\n        res=>res.data,\r\n        (res,userId)=>userId,\r\n        (data,userId)=>data.filter(post=>post.user===userId) ?? []\r\n      )\r\n    },[])\r\n\r\n    const {postsForUser} = useGetPostsQuery(undefined,{\r\n      selectFromResult:result=>({\r\n        postsForUser: selectPostsForUser(result,userId)\r\n      })\r\n    })\r\n  \r\n    const postTitles = postsForUser.map(post => (\r\n      <li key={post.id}>\r\n        <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n      </li>\r\n    ))\r\n  \r\n    return (\r\n      <section>\r\n        <h2>{user.name}</h2>\r\n  \r\n        <ul>{postTitles}</ul>\r\n      </section>\r\n    )\r\n  }\r\n\r\nexport default UserPage","import { useDispatch, useSelector } from 'react-redux'\r\nimport { formatDistanceToNow, parseISO } from 'date-fns'\r\nimport classnames from 'classnames'\r\nimport { selectAllUsers } from '../users/usersSlice'\r\nimport { allNotificationsRead, selectAllNotifications } from './notificationsSlice'\r\nimport { useLayoutEffect } from 'react'\r\n\r\nconst NotificationsList = () => {\r\n    const dispatch = useDispatch()\r\n    const notifications = useSelector(selectAllNotifications)\r\n    const users = useSelector(selectAllUsers)\r\n\r\n    useLayoutEffect(() => {\r\n        dispatch(allNotificationsRead())\r\n    })\r\n\r\n    const renderedNotifications = notifications.map(notification => {\r\n        const date = parseISO(notification.date)\r\n        const timeAgo = formatDistanceToNow(date)\r\n        const user = users.find(user => user.id === notification.user) || {\r\n            name: 'Unknown User'\r\n        }\r\n\r\n        const notificationClassname = classnames('notification', {\r\n            new: notification.isNew\r\n        })\r\n\r\n        return (\r\n            <div key={notification.id} className={notificationClassname}>\r\n                <div>\r\n                    <b>{user.name}</b> {notification.message}\r\n                </div>\r\n                <div title={notification.date}>\r\n                    <i>{timeAgo} ago</i>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <section className=\"notificationsList\">\r\n            <h2>Notifications</h2>\r\n            {renderedNotifications}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default NotificationsList","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    value:[]\r\n}\r\n\r\nexport const fetchNews = createAsyncThunk('news/fetchNews', async () => {\r\n    try {\r\n        const res = await fetch('https://newsapi.org/v2/top-headlines?apiKey=549ee6eebb9f4f26b1c705374588091a&country=au')\r\n        const data = await res.json()\r\n        return data.articles\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n})\r\n\r\nconst newsSlice = createSlice({\r\n    name: 'news',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers(builder){\r\n        builder.addCase(fetchNews.fulfilled,(state,action)=>{\r\n            state.value = action.payload\r\n        })\r\n    }\r\n})\r\n\r\nexport const selectNews = state=>state.news.value\r\n\r\nexport default newsSlice.reducer","import { useSelector } from \"react-redux\"\r\nimport { selectNews } from \"./newsSlice\"\r\n\r\nconst NewsList = () => {\r\n    const news = useSelector(selectNews)\r\n    console.log(news);\r\n\r\n    return (\r\n        <section className='posts-list'>\r\n            {news.map((n,index) => (\r\n            <article className='post-excerpt' key={index}>\r\n                <h2><a href={n.url}>{n.title}</a></h2>\r\n                <p>{n.author} - published at - {n.publishedAt}</p>\r\n            </article>\r\n        ))}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default NewsList","import { useState } from \"react\"\r\nimport AddPostForm from \"../features/posts/AddPostForm\"\r\nimport PostsList from \"../features/posts/PostsList\"\r\n\r\nconst HomePage = () => {\r\n    // What is the correct way to get the isAddPostLoading global state?\r\n    const [isAddPostLoading, setIsAddPostLoading] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n            <AddPostForm\r\n                setIsAddPostLoading={setIsAddPostLoading} />\r\n            <PostsList\r\n                isAddPostLoading={isAddPostLoading}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Routes,\r\n} from 'react-router-dom'\r\n\r\nimport Navbar from './app/Navbar'\r\nimport PostsList from './features/posts/PostsList'\r\nimport AddPostForm from './features/posts/AddPostForm'\r\nimport SinglePostPage from './features/posts/SinglePostPage'\r\nimport { Spinner } from './components/Spinner'\r\nimport EditPostForm from './features/posts/EditPostForm'\r\nimport UserList from './features/users/UserList'\r\nimport UserPage from './features/users/UserPage'\r\nimport NotificationsList from './features/notifications/NotificationList'\r\nimport NewsList from './features/news/NewsList'\r\nimport HomePage from './components/HomePage'\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename='/Redux-RTK-RTKQ'>\r\n      <Routes>\r\n        <Route path='/' element={<Navbar />}>\r\n          <Route index element={<HomePage />} />\r\n          <Route path='posts/:postId' element={<SinglePostPage />} />\r\n          <Route path='editPost/:postId' element={<EditPostForm />} />\r\n          <Route path='users' element={<UserList />} />\r\n          <Route path='users/:userId' element={<UserPage />} />\r\n          <Route path='notifications' element={<NotificationsList />} />\r\n          <Route path='news' element={<NewsList />} />\r\n        </Route>\r\n        <Route path='*' element={<Spinner text='Not found' />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { rest, setupWorker } from 'msw'\r\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\nimport faker from 'faker'\r\nimport seedrandom from 'seedrandom'\r\nimport { Server as MockSocketServer } from 'mock-socket'\r\nimport { setRandom } from 'txtgen'\r\n\r\nimport { parseISO } from 'date-fns'\r\n\r\nconst NUM_USERS = 3\r\nconst POSTS_PER_USER = 3\r\nconst RECENT_NOTIFICATIONS_DAYS = 7\r\n\r\n// Add an extra delay to all endpoints, so loading spinners show up.\r\nconst ARTIFICIAL_DELAY_MS = 2000\r\n\r\n/* RNG setup */\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = true\r\n\r\nlet rng = seedrandom()\r\n\r\nif (useSeededRNG) {\r\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\r\n  let seedDate\r\n\r\n  if (randomSeedString) {\r\n    seedDate = new Date(randomSeedString)\r\n  } else {\r\n    seedDate = new Date()\r\n    randomSeedString = seedDate.toISOString()\r\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\r\n  }\r\n\r\n  rng = seedrandom(randomSeedString)\r\n  setRandom(rng)\r\n  faker.seed(seedDate.getTime())\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(rng() * (max - min + 1)) + min\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n  const index = getRandomInt(0, array.length - 1)\r\n  return array[index]\r\n}\r\n\r\n/* MSW Data Model Setup */\r\n\r\nexport const db = factory({\r\n  user: {\r\n    id: primaryKey(nanoid),\r\n    firstName: String,\r\n    lastName: String,\r\n    name: String,\r\n    username: String,\r\n    posts: manyOf('post'),\r\n  },\r\n  post: {\r\n    id: primaryKey(nanoid),\r\n    title: String,\r\n    date: String,\r\n    content: String,\r\n    reactions: oneOf('reaction'),\r\n    comments: manyOf('comment'),\r\n    user: oneOf('user'),\r\n  },\r\n  comment: {\r\n    id: primaryKey(String),\r\n    date: String,\r\n    text: String,\r\n    post: oneOf('post'),\r\n  },\r\n  reaction: {\r\n    id: primaryKey(nanoid),\r\n    thumbsUp: Number,\r\n    hooray: Number,\r\n    heart: Number,\r\n    rocket: Number,\r\n    eyes: Number,\r\n    post: oneOf('post'),\r\n  },\r\n})\r\n\r\nconst createUserData = () => {\r\n  const firstName = faker.name.firstName()\r\n  const lastName = faker.name.lastName()\r\n\r\n  return {\r\n    firstName,\r\n    lastName,\r\n    name: `${firstName} ${lastName}`,\r\n    username: faker.internet.userName(),\r\n  }\r\n}\r\n\r\nconst createPostData = (user) => {\r\n  return {\r\n    title: faker.lorem.words(),\r\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\r\n    user,\r\n    content: faker.lorem.paragraphs(),\r\n    reactions: db.reaction.create(),\r\n  }\r\n}\r\n\r\n// Create an initial set of users and posts\r\nfor (let i = 0; i < NUM_USERS; i++) {\r\n  const author = db.user.create(createUserData())\r\n\r\n  for (let j = 0; j < POSTS_PER_USER; j++) {\r\n    const newPost = createPostData(author)\r\n    db.post.create(newPost)\r\n  }\r\n}\r\n\r\nconst serializePost = (post) => ({\r\n  ...post,\r\n  user: post.user.id,\r\n})\r\n\r\n/* MSW REST API Handlers */\r\n\r\nexport const handlers = [\r\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\r\n    const posts = db.post.getAll().map(serializePost)\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\r\n  }),\r\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\r\n    const data = req.body\r\n\r\n    if (data.content === 'error') {\r\n      return res(\r\n        ctx.delay(ARTIFICIAL_DELAY_MS),\r\n        ctx.status(500),\r\n        ctx.json('Server error saving this post!')\r\n      )\r\n    }\r\n\r\n    data.date = new Date().toISOString()\r\n\r\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\r\n    data.user = user\r\n    data.reactions = db.reaction.create()\r\n\r\n    const post = db.post.create(data)\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\r\n  }),\r\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\r\n    const post = db.post.findFirst({\r\n      where: { id: { equals: req.params.postId } },\r\n    })\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\r\n  }),\r\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\r\n    const { id, ...data } = req.body\r\n    const updatedPost = db.post.update({\r\n      where: { id: { equals: req.params.postId } },\r\n      data,\r\n    })\r\n    return res(\r\n      ctx.delay(ARTIFICIAL_DELAY_MS),\r\n      ctx.json(serializePost(updatedPost))\r\n    )\r\n  }),\r\n\r\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\r\n    const post = db.post.findFirst({\r\n      where: { id: { equals: req.params.postId } },\r\n    })\r\n    return res(\r\n      ctx.delay(ARTIFICIAL_DELAY_MS),\r\n      ctx.json({ comments: post.comments })\r\n    )\r\n  }),\r\n\r\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\r\n    const postId = req.params.postId\r\n    const reaction = req.body.reaction\r\n    const post = db.post.findFirst({\r\n      where: { id: { equals: postId } },\r\n    })\r\n\r\n    const updatedPost = db.post.update({\r\n      where: { id: { equals: postId } },\r\n      data: {\r\n        reactions: {\r\n          ...post.reactions,\r\n          [reaction]: (post.reactions[reaction] += 1),\r\n        },\r\n      },\r\n    })\r\n\r\n    return res(\r\n      ctx.delay(ARTIFICIAL_DELAY_MS),\r\n      ctx.json(serializePost(updatedPost))\r\n    )\r\n  }),\r\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\r\n    const numNotifications = getRandomInt(1, 5)\r\n\r\n    let notifications = generateRandomNotifications(\r\n      undefined,\r\n      numNotifications,\r\n      db\r\n    )\r\n\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\r\n  }),\r\n  rest.get('/fakeApi/users', (req, res, ctx) => {\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\r\n  }),\r\n]\r\n\r\nexport const worker = setupWorker(...handlers)\r\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\r\n\r\n/* Mock Websocket Setup */\r\n\r\nconst socketServer = new MockSocketServer('ws://localhost')\r\n\r\nlet currentSocket\r\n\r\nconst sendMessage = (socket, obj) => {\r\n  socket.send(JSON.stringify(obj))\r\n}\r\n\r\n// Allow our UI to fake the server pushing out some notifications over the websocket,\r\n// as if other users were interacting with the system.\r\nconst sendRandomNotifications = (socket, since) => {\r\n  const numNotifications = getRandomInt(1, 5)\r\n\r\n  const notifications = generateRandomNotifications(since, numNotifications, db)\r\n\r\n  sendMessage(socket, { type: 'notifications', payload: notifications })\r\n}\r\n\r\nexport const forceGenerateNotifications = (since) => {\r\n  sendRandomNotifications(currentSocket, since)\r\n}\r\n\r\nsocketServer.on('connection', (socket) => {\r\n  currentSocket = socket\r\n\r\n  socket.on('message', (data) => {\r\n    const message = JSON.parse(data)\r\n\r\n    switch (message.type) {\r\n      case 'notifications': {\r\n        const since = message.payload\r\n        sendRandomNotifications(socket, since)\r\n        break\r\n      }\r\n      default:\r\n        break\r\n    }\r\n  })\r\n})\r\n\r\n/* Random Notifications Generation */\r\n\r\nconst notificationTemplates = [\r\n  'poked you',\r\n  'says hi!',\r\n  `is glad we're friends`,\r\n  'sent you a gift',\r\n]\r\n\r\nfunction generateRandomNotifications(since, numNotifications, db) {\r\n  const now = new Date()\r\n  let pastDate\r\n\r\n  if (since) {\r\n    pastDate = parseISO(since)\r\n  } else {\r\n    pastDate = new Date(now.valueOf())\r\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\r\n  }\r\n\r\n  // Create N random notifications. We won't bother saving these\r\n  // in the DB - just generate a new batch and return them.\r\n  const notifications = [...Array(numNotifications)].map(() => {\r\n    const user = randomFromArray(db.user.getAll())\r\n    const template = randomFromArray(notificationTemplates)\r\n    return {\r\n      id: nanoid(),\r\n      date: faker.date.between(pastDate, now).toISOString(),\r\n      message: template,\r\n      user: user.id,\r\n    }\r\n  })\r\n\r\n  return notifications\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n//import postsReducer from '../features/posts/postsSlice'\r\n//import usersReducer from '../features/users/usersSlice'\r\nimport notificationReducer from '../features/notifications/notificationsSlice'\r\nimport newsReducer from '../features/news/newsSlice'\r\nimport { apiSlice } from '../features/api/apiSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    //posts: postsReducer,\r\n    //users: usersReducer,\r\n    notifications: notificationReducer,\r\n    news: newsReducer,\r\n    [apiSlice.reducerPath]:apiSlice.reducer\r\n  },\r\n  middleware:getDefaultMiddleware => getDefaultMiddleware().concat(apiSlice.middleware)\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport { worker } from './api/server'\r\nimport { extendedApiSlice } from './features/users/usersSlice'\r\nimport { fetchNews } from './features/news/newsSlice'\r\n\r\n// Wrap app rendering so we can wait for the mock API to initialize\r\nasync function start() {\r\n  // Start our mock API server\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    await worker.start({ onUnhandledRequest: 'bypass' })\r\n  }\r\n\r\n  store.dispatch(extendedApiSlice.endpoints.getUsers.initiate())\r\n  //store.dispatch(fetchPosts())\r\n  store.dispatch(fetchNews())\r\n\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  )\r\n}\r\n\r\nstart()\r\n"],"sourceRoot":""}